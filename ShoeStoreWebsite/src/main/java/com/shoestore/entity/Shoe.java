package com.shoestore.entity;
// Generated Apr 20, 2024, 2:20:15 PM by Hibernate Tools 4.3.6.Final

import java.beans.Transient;
import java.util.Base64;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Shoe generated by hbm2java
 */
@Entity
@Table(name = "shoe", catalog = "shoestoredb", uniqueConstraints = @UniqueConstraint(columnNames = "shoe_name"))
@NamedQueries({
	@NamedQuery(name = "Shoe.findAll", query = "SELECT s FROM Shoe s"),
	@NamedQuery(name = "Shoe.findByShoeName", query = "SELECT s FROM Shoe s WHERE s.shoeName = :shoeName"),
	
	@NamedQuery(name = "Shoe.countAll", query = "SELECT COUNT(*) FROM Shoe"),
	@NamedQuery(name = "Shoe.countByType", query = "SELECT COUNT(s) FROM Shoe s WHERE s.type.typeId = :typeId"),
	
	@NamedQuery(name = "Shoe.findByType", query = "SELECT s FROM Shoe s JOIN Type t ON s.type.typeId = t.typeId AND t.typeId = :typeId"),
	@NamedQuery(name = "Shoe.findNew", query = "SELECT s FROM Shoe s ORDER BY s.releasedDate DESC"),
	
	//Câu lệnh truy vấn để tìm giày theo tên giày hoặc thương hiệu hoặc mô tả bằng keyword
	@NamedQuery(name = "Shoe.search", query = "SELECT s FROM Shoe s WHERE s.shoeName LIKE '%' || :keyword || '%'" 
				+ " OR s.brand LIKE '%' || :keyword || '%'"
				+ " OR s.description LIKE '%' || :keyword || '%'")
})
public class Shoe implements java.io.Serializable {

	private Integer shoeId;
	private Type type;
	private String shoeName;
	private String brand;
	private String description;
	private byte[] shoeImage;
	private String base64Image;
	private float shoePrice;
	private Date releasedDate;
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);
	private Set<Rate> rates = new HashSet<Rate>(0);

	public Shoe() {
	}
	
	public Shoe(Integer shoeId) {
		super();
		this.shoeId = shoeId;
	}

	public Shoe(Type type, String shoeName, String brand, String description, byte[] shoeImage, float shoePrice,
			Date releasedDate) {
		super();
		this.type = type;
		this.shoeName = shoeName;
		this.brand = brand;
		this.description = description;
		this.shoeImage = shoeImage;
		this.shoePrice = shoePrice;
		this.releasedDate = releasedDate;
	}

	public Shoe(int shoeId, Type type, String shoeName, String brand, String description, byte[] shoeImage,
			float shoePrice, Date releasedDate) {
		this.shoeId = shoeId;
		this.type = type;
		this.shoeName = shoeName;
		this.brand = brand;
		this.description = description;
		this.shoeImage = shoeImage;
		this.shoePrice = shoePrice;
		this.releasedDate = releasedDate;
	}

	public Shoe(int shoeId, Type type, String shoeName, String brand, String description, byte[] shoeImage,
			float shoePrice, Date releasedDate, Set<OrderDetail> orderDetails, Set<Rate> rates) {
		this.shoeId = shoeId;
		this.type = type;
		this.shoeName = shoeName;
		this.brand = brand;
		this.description = description;
		this.shoeImage = shoeImage;
		this.shoePrice = shoePrice;
		this.releasedDate = releasedDate;
		this.orderDetails = orderDetails;
		this.rates = rates;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "shoe_id", unique = true, nullable = false)
	public int getShoeId() {
		return this.shoeId;
	}

	public void setShoeId(int shoeId) {
		this.shoeId = shoeId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "type_id", nullable = false)
	public Type getType() {
		return this.type;
	}

	public void setType(Type type) {
		this.type = type;
	}

	@Column(name = "shoe_name", unique = true, nullable = false, length = 50)
	public String getShoeName() {
		return this.shoeName;
	}

	public void setShoeName(String shoeName) {
		this.shoeName = shoeName;
	}

	@Column(name = "brand", nullable = false, length = 50)
	public String getBrand() {
		return this.brand;
	}

	public void setBrand(String brand) {
		this.brand = brand;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "shoe_image", nullable = false)
	public byte[] getShoeImage() {
		return this.shoeImage;
	}

	public void setShoeImage(byte[] shoeImage) {
		this.shoeImage = shoeImage;
	}

	@Column(name = "shoe_price", nullable = false, precision = 12, scale = 0)
	public float getShoePrice() {
		return this.shoePrice;
	}

	public void setShoePrice(float shoePrice) {
		this.shoePrice = shoePrice;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "released_date", nullable = false, length = 10)
	public Date getReleasedDate() {
		return this.releasedDate;
	}

	public void setReleasedDate(Date releasedDate) {
		this.releasedDate = releasedDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shoe")
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "shoe")
	public Set<Rate> getRates() {
		TreeSet<Rate> sortedRates = new TreeSet<Rate>(new Comparator<Rate>() {
			
			@Override
			public int compare(Rate rate1, Rate rate2) {
				return rate2.getRateTime().compareTo(rate1.getRateTime());
			}
		});
		
		sortedRates.addAll(rates);
		return sortedRates;
	}

	public void setRates(Set<Rate> rates) {
		this.rates = rates;
	}

	@javax.persistence.Transient
	public String getBase64Image() {
		this.base64Image = Base64.getEncoder().encodeToString(this.shoeImage);
		return this.base64Image;
	}
	
	@javax.persistence.Transient
	public void setBase64Image(String base64Image) {
		this.base64Image = base64Image;
	}
	
	@javax.persistence.Transient
	public float getAverageRating() {
		float averageRating = 0.0f;
		float sum = 0.0f;
		
		if(rates.isEmpty())
		{
			return 0.0f;
		}
		
		for(Rate rate : rates)
		{
			sum += rate.getRatingStars();
		}
		
		averageRating = sum / rates.size();
		
		return averageRating;
	}
	
	@javax.persistence.Transient
	public String getRatingStars() {
		float averageRating = getAverageRating();
		
		return getRatingString(averageRating);
	}
	
	@javax.persistence.Transient
	public String getRatingString(float averageRating) {
		String result = "";
		
		int numberOfStarsOn = (int) averageRating;
		
		for (int i = 1; i <= numberOfStarsOn; i++)
		{
			result += "on,";
		}
		
		int next = numberOfStarsOn + 1;
		
		if(averageRating > numberOfStarsOn)
		{
			result += "half,";
			next++;
		}
		
		for(int j = next; j <= 5; j++)
		{
			result += "off,";
		}
		
		return result.substring(0, result.length() - 1);
	}

	@Override
	public int hashCode() {
		return Objects.hash(shoeId);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Shoe other = (Shoe) obj;
		if(shoeId == null) {
			if(other.shoeId != null) {
				return false;
			}
		} else if (!shoeId.equals(other.shoeId)) {
			return false;
		}
		return shoeId == other.shoeId;
	}
	
	
	
	
}
